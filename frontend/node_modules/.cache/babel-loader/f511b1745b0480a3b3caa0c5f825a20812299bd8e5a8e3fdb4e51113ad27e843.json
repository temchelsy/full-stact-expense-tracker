{"ast":null,"code":"var _jsxFileName = \"/home/chelsynew/Desktop/expense-tracker_fullstack-master/frontend/src/Components/Chart/Chart.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Chart as ChartJs, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport styled from 'styled-components';\nimport { useGlobalContext } from '../../context/globalContext';\nimport { dateFormat } from '../../utils/dateFormat';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJs.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement);\nfunction Chart() {\n  _s();\n  const {\n    incomes,\n    expenses\n  } = useGlobalContext();\n\n  // Function to get month name from a date\n  const getMonthName = date => {\n    const options = {\n      month: 'long'\n    };\n    return new Intl.DateTimeFormat('en-US', options).format(new Date(date));\n  };\n\n  // Group incomes and expenses by month\n  const groupByMonth = data => {\n    return data.reduce((acc, curr) => {\n      const month = getMonthName(curr.date);\n      const amount = curr.amount;\n      if (!acc[month]) {\n        acc[month] = 0;\n      }\n      acc[month] += amount;\n      return acc;\n    }, {});\n  };\n\n  // Aggregating amounts\n  const monthlyIncomes = groupByMonth(incomes);\n  const monthlyExpenses = groupByMonth(expenses);\n\n  // Preparing the data for the chart\n  const labels = Object.keys(monthlyIncomes); // Unique months\n  const incomeData = labels.map(month => monthlyIncomes[month] || 0); // Get income amounts\n  const expenseData = labels.map(month => monthlyExpenses[month] || 0); // Get expense amounts\n\n  const data = {\n    labels,\n    datasets: [{\n      label: 'Income',\n      data: incomeData,\n      backgroundColor: 'rgba(0, 128, 0, 0.5)',\n      // Semi-transparent green\n      borderColor: 'green',\n      borderWidth: 2,\n      tension: 0.2,\n      fill: true // Fill area under the line\n    }, {\n      label: 'Expenses',\n      data: expenseData,\n      backgroundColor: 'rgba(255, 0, 0, 0.5)',\n      // Semi-transparent red\n      borderColor: 'red',\n      borderWidth: 2,\n      tension: 0.2,\n      fill: true // Fill area under the line\n    }]\n  };\n\n  return /*#__PURE__*/_jsxDEV(ChartStyled, {\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: data,\n      options: {\n        responsive: true,\n        plugins: {\n          legend: {\n            display: true,\n            position: 'top'\n          },\n          tooltip: {\n            mode: 'index',\n            // Show tooltip for all datasets at the same x-axis value\n            intersect: false\n          }\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Months'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Amount'\n            },\n            beginAtZero: true // Start y-axis from 0\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n_s(Chart, \"PHep46UhTemPLuSa3MfIkZAuTiE=\", false, function () {\n  return [useGlobalContext];\n});\n_c = Chart;\nconst ChartStyled = styled.div`\n    background: #FCF6F9;\n    border: 2px solid #FFFFFF;\n    box-shadow: 0px 1px 15px rgba(0, 0, 0, 0.06);\n    padding: 1rem;\n    border-radius: 20px;\n    height: 100%;\n`;\n_c2 = ChartStyled;\nexport default Chart;\nvar _c, _c2;\n$RefreshReg$(_c, \"Chart\");\n$RefreshReg$(_c2, \"ChartStyled\");","map":{"version":3,"names":["React","Chart","ChartJs","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","ArcElement","Line","styled","useGlobalContext","dateFormat","register","incomes","expenses","getMonthName","date","options","month","Intl","DateTimeFormat","format","Date","groupByMonth","data","reduce","acc","curr","amount","monthlyIncomes","monthlyExpenses","labels","Object","keys","incomeData","map","expenseData","datasets","label","backgroundColor","borderColor","borderWidth","tension","fill","responsive","plugins","legend","display","position","tooltip","mode","intersect","scales","x","title","text","y","beginAtZero","ChartStyled","div"],"sources":["/home/chelsynew/Desktop/expense-tracker_fullstack-master/frontend/src/Components/Chart/Chart.js"],"sourcesContent":["import React from 'react';\nimport {\n    Chart as ChartJs,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend,\n    ArcElement,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport styled from 'styled-components';\nimport { useGlobalContext } from '../../context/globalContext';\nimport { dateFormat } from '../../utils/dateFormat';\n\nChartJs.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend,\n    ArcElement,\n);\n\nfunction Chart() {\n    const { incomes, expenses } = useGlobalContext();\n\n    // Function to get month name from a date\n    const getMonthName = (date) => {\n        const options = { month: 'long' };\n        return new Intl.DateTimeFormat('en-US', options).format(new Date(date));\n    };\n\n    // Group incomes and expenses by month\n    const groupByMonth = (data) => {\n        return data.reduce((acc, curr) => {\n            const month = getMonthName(curr.date);\n            const amount = curr.amount;\n\n            if (!acc[month]) {\n                acc[month] = 0;\n            }\n            acc[month] += amount;\n            return acc;\n        }, {});\n    };\n\n    // Aggregating amounts\n    const monthlyIncomes = groupByMonth(incomes);\n    const monthlyExpenses = groupByMonth(expenses);\n\n    // Preparing the data for the chart\n    const labels = Object.keys(monthlyIncomes); // Unique months\n    const incomeData = labels.map(month => monthlyIncomes[month] || 0); // Get income amounts\n    const expenseData = labels.map(month => monthlyExpenses[month] || 0); // Get expense amounts\n\n    const data = {\n        labels,\n        datasets: [\n            {\n                label: 'Income',\n                data: incomeData,\n                backgroundColor: 'rgba(0, 128, 0, 0.5)', // Semi-transparent green\n                borderColor: 'green',\n                borderWidth: 2,\n                tension: 0.2,\n                fill: true, // Fill area under the line\n            },\n            {\n                label: 'Expenses',\n                data: expenseData,\n                backgroundColor: 'rgba(255, 0, 0, 0.5)', // Semi-transparent red\n                borderColor: 'red',\n                borderWidth: 2,\n                tension: 0.2,\n                fill: true, // Fill area under the line\n            }\n        ]\n    };\n\n    return (\n        <ChartStyled>\n            <Line data={data} options={{\n                responsive: true,\n                plugins: {\n                    legend: {\n                        display: true,\n                        position: 'top',\n                    },\n                    tooltip: {\n                        mode: 'index', // Show tooltip for all datasets at the same x-axis value\n                        intersect: false,\n                    },\n                },\n                scales: {\n                    x: {\n                        title: {\n                            display: true,\n                            text: 'Months',\n                        },\n                    },\n                    y: {\n                        title: {\n                            display: true,\n                            text: 'Amount',\n                        },\n                        beginAtZero: true, // Start y-axis from 0\n                    },\n                },\n            }} />\n        </ChartStyled>\n    );\n}\n\nconst ChartStyled = styled.div`\n    background: #FCF6F9;\n    border: 2px solid #FFFFFF;\n    box-shadow: 0px 1px 15px rgba(0, 0, 0, 0.06);\n    padding: 1rem;\n    border-radius: 20px;\n    height: 100%;\n`;\n\nexport default Chart;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACIC,KAAK,IAAIC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,EACNC,UAAU,QACP,UAAU;AACjB,SAASC,IAAI,QAAQ,iBAAiB;AACtC,OAAOC,MAAM,MAAM,mBAAmB;AACtC,SAASC,gBAAgB,QAAQ,6BAA6B;AAC9D,SAASC,UAAU,QAAQ,wBAAwB;AAAC;AAEpDZ,OAAO,CAACa,QAAQ,CACZZ,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAM,EACNC,UAAU,CACb;AAED,SAAST,KAAK,GAAG;EAAA;EACb,MAAM;IAAEe,OAAO;IAAEC;EAAS,CAAC,GAAGJ,gBAAgB,EAAE;;EAEhD;EACA,MAAMK,YAAY,GAAIC,IAAI,IAAK;IAC3B,MAAMC,OAAO,GAAG;MAAEC,KAAK,EAAE;IAAO,CAAC;IACjC,OAAO,IAAIC,IAAI,CAACC,cAAc,CAAC,OAAO,EAAEH,OAAO,CAAC,CAACI,MAAM,CAAC,IAAIC,IAAI,CAACN,IAAI,CAAC,CAAC;EAC3E,CAAC;;EAED;EACA,MAAMO,YAAY,GAAIC,IAAI,IAAK;IAC3B,OAAOA,IAAI,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAK;MAC9B,MAAMT,KAAK,GAAGH,YAAY,CAACY,IAAI,CAACX,IAAI,CAAC;MACrC,MAAMY,MAAM,GAAGD,IAAI,CAACC,MAAM;MAE1B,IAAI,CAACF,GAAG,CAACR,KAAK,CAAC,EAAE;QACbQ,GAAG,CAACR,KAAK,CAAC,GAAG,CAAC;MAClB;MACAQ,GAAG,CAACR,KAAK,CAAC,IAAIU,MAAM;MACpB,OAAOF,GAAG;IACd,CAAC,EAAE,CAAC,CAAC,CAAC;EACV,CAAC;;EAED;EACA,MAAMG,cAAc,GAAGN,YAAY,CAACV,OAAO,CAAC;EAC5C,MAAMiB,eAAe,GAAGP,YAAY,CAACT,QAAQ,CAAC;;EAE9C;EACA,MAAMiB,MAAM,GAAGC,MAAM,CAACC,IAAI,CAACJ,cAAc,CAAC,CAAC,CAAC;EAC5C,MAAMK,UAAU,GAAGH,MAAM,CAACI,GAAG,CAACjB,KAAK,IAAIW,cAAc,CAACX,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;EACpE,MAAMkB,WAAW,GAAGL,MAAM,CAACI,GAAG,CAACjB,KAAK,IAAIY,eAAe,CAACZ,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;;EAEtE,MAAMM,IAAI,GAAG;IACTO,MAAM;IACNM,QAAQ,EAAE,CACN;MACIC,KAAK,EAAE,QAAQ;MACfd,IAAI,EAAEU,UAAU;MAChBK,eAAe,EAAE,sBAAsB;MAAE;MACzCC,WAAW,EAAE,OAAO;MACpBC,WAAW,EAAE,CAAC;MACdC,OAAO,EAAE,GAAG;MACZC,IAAI,EAAE,IAAI,CAAE;IAChB,CAAC,EACD;MACIL,KAAK,EAAE,UAAU;MACjBd,IAAI,EAAEY,WAAW;MACjBG,eAAe,EAAE,sBAAsB;MAAE;MACzCC,WAAW,EAAE,KAAK;MAClBC,WAAW,EAAE,CAAC;MACdC,OAAO,EAAE,GAAG;MACZC,IAAI,EAAE,IAAI,CAAE;IAChB,CAAC;EAET,CAAC;;EAED,oBACI,QAAC,WAAW;IAAA,uBACR,QAAC,IAAI;MAAC,IAAI,EAAEnB,IAAK;MAAC,OAAO,EAAE;QACvBoB,UAAU,EAAE,IAAI;QAChBC,OAAO,EAAE;UACLC,MAAM,EAAE;YACJC,OAAO,EAAE,IAAI;YACbC,QAAQ,EAAE;UACd,CAAC;UACDC,OAAO,EAAE;YACLC,IAAI,EAAE,OAAO;YAAE;YACfC,SAAS,EAAE;UACf;QACJ,CAAC;QACDC,MAAM,EAAE;UACJC,CAAC,EAAE;YACCC,KAAK,EAAE;cACHP,OAAO,EAAE,IAAI;cACbQ,IAAI,EAAE;YACV;UACJ,CAAC;UACDC,CAAC,EAAE;YACCF,KAAK,EAAE;cACHP,OAAO,EAAE,IAAI;cACbQ,IAAI,EAAE;YACV,CAAC;YACDE,WAAW,EAAE,IAAI,CAAE;UACvB;QACJ;MACJ;IAAE;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QACK;AAEtB;AAAC,GAxFQ3D,KAAK;EAAA,QACoBY,gBAAgB;AAAA;AAAA,KADzCZ,KAAK;AA0Fd,MAAM4D,WAAW,GAAGjD,MAAM,CAACkD,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAC,MAPID,WAAW;AASjB,eAAe5D,KAAK;AAAC;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}