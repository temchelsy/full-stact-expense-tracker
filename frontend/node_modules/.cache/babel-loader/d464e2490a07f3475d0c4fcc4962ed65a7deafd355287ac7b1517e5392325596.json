{"ast":null,"code":"var _jsxFileName = \"/home/chelsynew/Desktop/expense-tracker_fullstack-master/frontend/src/Components/Chart/Chart.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Chart as ChartJs, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport styled from 'styled-components';\nimport { useGlobalContext } from '../../context/globalContext';\nimport { dateFormat } from '../../utils/dateFormat';\nimport { Cell, Pie, PieChart, ResponsiveContainer, Tooltip as RechartsTooltip } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJs.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement);\nconst COLORS = [\"#0088FE\", \"#FFBB28\"];\nfunction Chart() {\n  _s();\n  const {\n    incomes,\n    expenses\n  } = useGlobalContext();\n\n  // Array of all month names\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n  // Group incomes and expenses by month\n  const groupByMonth = data => {\n    return data.reduce((acc, curr) => {\n      const monthIndex = new Date(curr.date).getMonth(); // Get month index (0-11)\n      const amount = curr.amount;\n      if (!acc[monthIndex]) {\n        acc[monthIndex] = 0;\n      }\n      acc[monthIndex] += amount;\n      return acc;\n    }, new Array(12).fill(0)); // Initialize with 0 for all 12 months\n  };\n\n  // Aggregating amounts\n  const monthlyIncomes = groupByMonth(incomes);\n  const monthlyExpenses = groupByMonth(expenses);\n\n  // Preparing the data for the line chart\n  const data = {\n    labels: months,\n    // Use month names as labels\n    datasets: [{\n      label: 'Income',\n      data: monthlyIncomes,\n      backgroundColor: 'green',\n      borderColor: 'green',\n      borderWidth: 2,\n      tension: 0,\n      fill: false,\n      pointRadius: 5,\n      pointHoverRadius: 7\n    }, {\n      label: 'Expenses',\n      data: monthlyExpenses,\n      backgroundColor: 'red',\n      borderColor: 'red',\n      borderWidth: 2,\n      tension: 0,\n      fill: false,\n      pointRadius: 5,\n      pointHoverRadius: 7\n    }]\n  };\n\n  // Calculate total income and expenses for the doughnut chart\n  const totalIncome = incomes.reduce((acc, curr) => acc + curr.amount, 0);\n  const totalExpenses = expenses.reduce((acc, curr) => acc + curr.amount, 0);\n\n  // Data for the Doughnut Chart\n  const doughnutData = [{\n    name: \"Income\",\n    value: totalIncome\n  }, {\n    name: \"Expense\",\n    value: totalExpenses\n  }];\n  return /*#__PURE__*/_jsxDEV(ChartContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Line, {\n      data: data,\n      options: {\n        responsive: true,\n        plugins: {\n          legend: {\n            display: true,\n            position: 'top'\n          },\n          tooltip: {\n            mode: 'index',\n            intersect: false\n          }\n        },\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'Months'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Amount'\n            },\n            beginAtZero: true\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DoughnutChart, {\n      income: totalIncome,\n      expense: totalExpenses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 9\n  }, this);\n}\n_s(Chart, \"PHep46UhTemPLuSa3MfIkZAuTiE=\", false, function () {\n  return [useGlobalContext];\n});\n_c = Chart;\nconst DoughnutChart = _ref => {\n  let {\n    income = 0,\n    expense = 0\n  } = _ref;\n  // Check if there's any data to display\n  const hasData = income > 0 || expense > 0;\n  if (!hasData) {\n    return /*#__PURE__*/_jsxDEV(DoughnutChartContainer, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        title: \"Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-center text-gray-500 dark:text-gray-400 mt-4\",\n        children: \"No data available to display.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(DoughnutChartContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      title: \"Summary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      children: /*#__PURE__*/_jsxDEV(PieChart, {\n        children: [/*#__PURE__*/_jsxDEV(RechartsTooltip, {\n          formatter: value => `$${value.toFixed(2)}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {\n          verticalAlign: \"bottom\",\n          height: 36\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Pie, {\n          data: doughnutData,\n          innerRadius: 60,\n          outerRadius: 80,\n          fill: \"#8884d8\",\n          paddingAngle: 5,\n          dataKey: \"value\",\n          label: _ref2 => {\n            let {\n              name,\n              percent\n            } = _ref2;\n            return `${name} ${(percent * 100).toFixed(0)}%`;\n          },\n          children: doughnutData.map((entry, index) => /*#__PURE__*/_jsxDEV(Cell, {\n            fill: COLORS[index % COLORS.length]\n          }, `cell-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 9\n  }, this);\n};\n_c2 = DoughnutChart;\nconst ChartContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n`;\n_c3 = ChartContainer;\nconst DoughnutChartContainer = styled.div`\n    width: 100%;\n    md:w-1/3;\n    flex: flex-col;\n    items-center;\n    background: #FCF6F9;\n    border: 2px solid #FFFFFF;\n    box-shadow: 0px 1px 15px rgba(0, 0, 0, 0.06);\n    padding: 1rem;\n    border-radius: 20px;\n    height: 100%;\n`;\n_c4 = DoughnutChartContainer;\nexport default Chart;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Chart\");\n$RefreshReg$(_c2, \"DoughnutChart\");\n$RefreshReg$(_c3, \"ChartContainer\");\n$RefreshReg$(_c4, \"DoughnutChartContainer\");","map":{"version":3,"names":["React","Chart","ChartJs","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","ArcElement","Line","styled","useGlobalContext","dateFormat","Cell","Pie","PieChart","ResponsiveContainer","RechartsTooltip","register","COLORS","incomes","expenses","months","groupByMonth","data","reduce","acc","curr","monthIndex","Date","date","getMonth","amount","Array","fill","monthlyIncomes","monthlyExpenses","labels","datasets","label","backgroundColor","borderColor","borderWidth","tension","pointRadius","pointHoverRadius","totalIncome","totalExpenses","doughnutData","name","value","responsive","plugins","legend","display","position","tooltip","mode","intersect","scales","x","title","text","y","beginAtZero","DoughnutChart","income","expense","hasData","toFixed","percent","map","entry","index","length","ChartContainer","div","DoughnutChartContainer"],"sources":["/home/chelsynew/Desktop/expense-tracker_fullstack-master/frontend/src/Components/Chart/Chart.js"],"sourcesContent":["import React from 'react';\nimport {\n    Chart as ChartJs,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend,\n    ArcElement,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport styled from 'styled-components';\nimport { useGlobalContext } from '../../context/globalContext';\nimport { dateFormat } from '../../utils/dateFormat';\nimport {\n    Cell,\n    \n    Pie,\n    PieChart,\n    ResponsiveContainer,\n    Tooltip as RechartsTooltip,\n} from 'recharts';\n\nChartJs.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend,\n    ArcElement,\n);\n\nconst COLORS = [\"#0088FE\", \"#FFBB28\"];\n\nfunction Chart() {\n    const { incomes, expenses } = useGlobalContext();\n\n    // Array of all month names\n    const months = [\n        'January', 'February', 'March', 'April', 'May', 'June',\n        'July', 'August', 'September', 'October', 'November', 'December'\n    ];\n\n    // Group incomes and expenses by month\n    const groupByMonth = (data) => {\n        return data.reduce((acc, curr) => {\n            const monthIndex = new Date(curr.date).getMonth(); // Get month index (0-11)\n            const amount = curr.amount;\n\n            if (!acc[monthIndex]) {\n                acc[monthIndex] = 0;\n            }\n            acc[monthIndex] += amount;\n            return acc;\n        }, new Array(12).fill(0)); // Initialize with 0 for all 12 months\n    };\n\n    // Aggregating amounts\n    const monthlyIncomes = groupByMonth(incomes);\n    const monthlyExpenses = groupByMonth(expenses);\n\n    // Preparing the data for the line chart\n    const data = {\n        labels: months, // Use month names as labels\n        datasets: [\n            {\n                label: 'Income',\n                data: monthlyIncomes,\n                backgroundColor: 'green',\n                borderColor: 'green',\n                borderWidth: 2,\n                tension: 0,\n                fill: false,\n                pointRadius: 5,\n                pointHoverRadius: 7,\n            },\n            {\n                label: 'Expenses',\n                data: monthlyExpenses,\n                backgroundColor: 'red',\n                borderColor: 'red',\n                borderWidth: 2,\n                tension: 0,\n                fill: false,\n                pointRadius: 5,\n                pointHoverRadius: 7,\n            }\n        ]\n    };\n\n    // Calculate total income and expenses for the doughnut chart\n    const totalIncome = incomes.reduce((acc, curr) => acc + curr.amount, 0);\n    const totalExpenses = expenses.reduce((acc, curr) => acc + curr.amount, 0);\n\n    // Data for the Doughnut Chart\n    const doughnutData = [\n        { name: \"Income\", value: totalIncome },\n        { name: \"Expense\", value: totalExpenses },\n    ];\n\n    return (\n        <ChartContainer>\n            <Line \n                data={data} \n                options={{\n                    responsive: true,\n                    plugins: {\n                        legend: {\n                            display: true,\n                            position: 'top',\n                        },\n                        tooltip: {\n                            mode: 'index',\n                            intersect: false,\n                        },\n                    },\n                    scales: {\n                        x: {\n                            title: {\n                                display: true,\n                                text: 'Months',\n                            },\n                        },\n                        y: {\n                            title: {\n                                display: true,\n                                text: 'Amount',\n                            },\n                            beginAtZero: true,\n                        },\n                    },\n                }} \n            />\n            <DoughnutChart income={totalIncome} expense={totalExpenses} />\n        </ChartContainer>\n    );\n}\n\nconst DoughnutChart = ({ income = 0, expense = 0 }) => {\n    // Check if there's any data to display\n    const hasData = income > 0 || expense > 0;\n\n    if (!hasData) {\n        return (\n            <DoughnutChartContainer>\n                <Title title=\"Summary\" />\n                <p className=\"text-center text-gray-500 dark:text-gray-400 mt-4\">No data available to display.</p>\n            </DoughnutChartContainer>\n        );\n    }\n\n    return (\n        <DoughnutChartContainer>\n            <Title title=\"Summary\" />\n            <ResponsiveContainer width=\"100%\" height={300}>\n                <PieChart>\n                    <RechartsTooltip formatter={(value) => `$${value.toFixed(2)}`} />\n                    <Legend verticalAlign=\"bottom\" height={36} />\n                    <Pie\n                        data={doughnutData}\n                        innerRadius={60}\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        paddingAngle={5}\n                        dataKey=\"value\"\n                        label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                    >\n                        {doughnutData.map((entry, index) => (\n                            <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                        ))}\n                    </Pie>\n                </PieChart>\n            </ResponsiveContainer>\n        </DoughnutChartContainer>\n    );\n};\n\nconst ChartContainer = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 100%;\n`;\n\nconst DoughnutChartContainer = styled.div`\n    width: 100%;\n    md:w-1/3;\n    flex: flex-col;\n    items-center;\n    background: #FCF6F9;\n    border: 2px solid #FFFFFF;\n    box-shadow: 0px 1px 15px rgba(0, 0, 0, 0.06);\n    padding: 1rem;\n    border-radius: 20px;\n    height: 100%;\n`;\n\nexport default Chart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}